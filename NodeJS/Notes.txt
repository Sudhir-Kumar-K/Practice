LIST OF TOOLS/TECHNOLOGIES/APP REQUIRED FOR NODE APP

EXPRESS FRAMEWORK
MONGOOSE FOR MONGODB INTERACTION

BLUEBIRD FOR PROMISE FRAMEWORK
PASSPORT FOR AUTHENTICAITON

MOCHA FOR TESTING


[imp] The standard way to start a node application is :
    add start command to script section of package.json file
    eg: scripts : [
        "start":"node app.js"
    ]
	
	
=================================================================================================================================================
what is node.js
non-blocking io
event loop
callbacks
callback hell
promises
async await


query params
http://stackabuse.com/?page=2&limit=3 

req.query
req.query.page;


path params / route params
http://stackabuse.com/tag/node

req.params

body params

req.body

Does Node.Js Support Multi-Core Platforms? And Is It Capable Of Utilizing All The Cores?
Yes, for this it has cluster module, I need to inverstigate much into it. But because of single threaded architecture, it will have some limitations. 

select max(salary) from Emp where salary < (select max(salary) from Emp); 
==========================================================================================================================================================

QAs: 
What is node js?
-- Node js is the javascript runtime environment or server side javascript built on Chrome's V8 engine. 
-- Its event driven,  non blocking IO features makes it highly effecient for IO bound jobs. 
-- So we can say, Node is suitable for IO bound jobs like most of the IOT applications, chat applications, collaborative games etc. 
-- But its a bad choice for CPU intensive tasks you know.

Chrome's v8 Engine: 
V8 is Googleâ€™s open source high-performance JavaScript engine, written in C++ and used in Google Chrome, the open source browser from Google. 


Event-driven: 
event-driven programming is a programming paradigm in which the flow of the program is determined by events such as user actions (mouse clicks, key presses), 
sensor outputs, or messages from other programs/threads

This means that code will be reactive to events instead of constantly trying to detect changes.

Events enable an object to notify other objects when something of interest occurs. 
The object that sends (or raises) the event is called the publisher and the objects that receive (or handle) the event are called subscribers.

non-blocking IO. 

